# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'barkenginegame.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import yaml
import game


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1111, 806)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, -10, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(970, 730, 41, 41))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(970, 630, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(970, 660, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.SpeedKPH = QtWidgets.QLCDNumber(self.centralwidget)
        self.SpeedKPH.setGeometry(QtCore.QRect(1010, 710, 91, 51))
        self.SpeedKPH.setObjectName("SpeedKPH")
        self.Oiltemp = QtWidgets.QProgressBar(self.centralwidget)
        self.Oiltemp.setGeometry(QtCore.QRect(1040, 640, 71, 21))
        self.Oiltemp.setProperty("value", 24)
        self.Oiltemp.setObjectName("Oiltemp")
        self.Gear = QtWidgets.QLCDNumber(self.centralwidget)
        self.Gear.setGeometry(QtCore.QRect(1030, 670, 71, 31))
        self.Gear.setObjectName("Gear")
        # Chat display
        self.ChatDisplay = QtWidgets.QTextEdit(self.centralwidget)
        self.ChatDisplay.setGeometry(QtCore.QRect(0, 540, 300, 200))
        self.ChatDisplay.setReadOnly(True)
        self.ChatDisplay.setObjectName("ChatDisplay")
        
        # Chat input
        self.Chat = QtWidgets.QLineEdit(self.centralwidget)
        self.Chat.setGeometry(QtCore.QRect(0, 740, 191, 20))
        self.Chat.setText("")
        self.Chat.setObjectName("Chat")
        self.Chat.returnPressed.connect(self.process_chat_input)
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1111, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Money: {MoneyValue}"))
        self.label_2.setText(_translate("MainWindow", "KPH:"))
        self.label_3.setText(_translate("MainWindow", "Oil Temp:"))
        self.label_5.setText(_translate("MainWindow", "Gear:"))
        
        # Load commands from commands.yaml
        with open("commands.yaml", "r") as f:
            self.commands = yaml.safe_load(f)
        
        # Initialize chat with help message
        self.ChatDisplay.append("Welcome! Type /help to see available commands")
    
    def process_chat_input(self):
        text = self.Chat.text().strip()
        if text:
            # Add the message to chat display
            self.ChatDisplay.append(f"> {text}")
            
            # Check if it's a command
            if text.startswith('/'):
                command = text[1:].split(' ')[0]  # Get the command without parameters
                params = text[1:].split(' ')[1:]  # Get any parameters
                
                # Handle commands
                if command == 'help':
                    help_text = "Available commands:\n"
                    for cmd in self.commands:
                        help_text += f"/{cmd}\n"
                    self.ChatDisplay.append(help_text)
                elif command in self.commands:
                    try:
                        # Special handling for save/load commands
                        if command == 'save':
                            game.savegame(game.currentmoney)
                            result = f"Game saved! Current money: {game.currentmoney}"
                        elif command == 'load':
                            data = game.loadgame()
                            result = f"Game loaded! Current money: {game.currentmoney}"
                        else:
                            # Get the corresponding function from game.py
                            func = getattr(game, self.commands[command])
                            
                            # Call the function with parameters if they exist
                            if params:
                                try:
                                    # Convert parameters to appropriate types
                                    converted_params = [float(p) if p.replace('.', '').isdigit() else p for p in params]
                                    result = func(*converted_params)
                                except ValueError:
                                    result = func(*params)  # Try with original strings if conversion fails
                            else:
                                result = func()
                        
                        # Display the result
                        if result is not None:
                            self.ChatDisplay.append(f"Command result: {result}")
                            
                        # Update money display for any command that might affect money
                        self.label.setText(f"Money: {game.currentmoney}")
                    except Exception as e:
                        self.ChatDisplay.append(f"Error executing command: {str(e)}")
                else:
                    self.ChatDisplay.append("Unknown command. Type /help for available commands.")
            else:
                # Handle regular chat message
                try:
                    result = game.handle_chat_message(text)
                    if result:
                        self.ChatDisplay.append(result)
                except Exception as e:
                    self.ChatDisplay.append(f"Error processing message: {str(e)}")
            
            # Clear the input field
            self.Chat.clear()
            
            # Clear the input field
            self.Chat.clear()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
